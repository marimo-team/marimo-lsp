// @ts-check
/// <reference lib="esnext" />
/**
 * @module codegen
 *
 * Generates TypeScript type definitions from package.json.
 * Do not edit the generated output file directly - modify package.json instead.
 *
 * Usage: node scripts/codegen.mjs
 */

import assert from "node:assert";
import * as NodeChildProcess from "node:child_process";
import * as NodeFs from "node:fs";
import * as NodeUrl from "node:url";
import pkg from "../package.json" with { type: "json" };

/** @type {(arr: Array<string>) => string} */
const union = (arr) =>
  arr
    .toSorted()
    .map((name) => JSON.stringify(name))
    .join(" | ");

const commands = pkg.contributes.commands.map((command) => command.command);

const viewNames =
  /** @type {Array<keyof typeof pkg["contributes"]['views']>} */ (
    Object.keys(pkg.contributes.views)
  );
assert(
  viewNames.length === 1,
  `Expected view contribution, found multiple: ${viewNames}`,
);
const views = pkg.contributes.views[viewNames[0]].map((view) => view.id);

assert(
  pkg.contributes.notebooks.length === 1,
  "Expected one notebook contribution",
);
const notebook = pkg.contributes.notebooks[0];

const contextKeys = [
  "marimo.notebook.hasStaleCells",
  "marimo.config.runtime.on_cell_change",
];

const code = NodeChildProcess.execFileSync(
  NodeUrl.fileURLToPath(
    new URL("../node_modules/@biomejs/biome/bin/biome", import.meta.url),
  ),
  ["format", "--stdin-file-path", "constants.ts"],
  {
    input: `\
// This file is auto-generated by scripts/codegen.mjs
// Do not edit directly - modify package.json and run the codegen script instead

export type MarimoCommand = ${union(commands)};

export type MarimoView = ${union(views)};

export const NOTEBOOK_TYPE = "${notebook.type}";

export type MarimoContextKey = ${union(contextKeys)};
`,
    encoding: "utf-8",
  },
);

const outputPath = NodeUrl.fileURLToPath(
  new URL("../src/constants.ts", import.meta.url),
);
NodeFs.writeFileSync(outputPath, code);
console.log(`âœ“ Wrote to ${outputPath}`);
